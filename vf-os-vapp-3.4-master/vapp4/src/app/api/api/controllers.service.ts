/**
 * vf-OS vApp 4.3 Endpoints
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ControlInformation } from '../model/controlInformation';
import { GlobalControlInformation } from '../model/globalControlInformation';
import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { InlineResponse2002 } from '../model/inlineResponse2002';
import { NewControlInformation } from '../model/newControlInformation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {CreateControlInformation} from "..";


@Injectable()
export class ControllersService {

    protected basePath = 'http://vf-os2.univ-lyon2.fr:8003';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * get all quality control made by the CPS
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllControlGet(observe?: 'body', reportProgress?: boolean): Observable<Array<ControlInformation>>;
    public getAllControlGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ControlInformation>>>;
    public getAllControlGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ControlInformation>>>;
    public getAllControlGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ControlInformation>>(`${this.basePath}/getAllControl`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get CPS control information
     *
     * @param mo Manufacturing Order
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGlobalControlInformationMoGet(mo: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GlobalControlInformation>>;
    public getGlobalControlInformationMoGet(mo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GlobalControlInformation>>>;
    public getGlobalControlInformationMoGet(mo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GlobalControlInformation>>>;
    public getGlobalControlInformationMoGet(mo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mo === null || mo === undefined) {
            throw new Error('Required parameter mo was null or undefined when calling getGlobalControlInformationMoGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<GlobalControlInformation>>(`${this.basePath}/getGlobalControlInformation/${encodeURIComponent(String(mo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get all new controller page field information
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNewControlInformationGet(observe?: 'body', reportProgress?: boolean): Observable<NewControlInformation[]>;
    public getNewControlInformationGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewControlInformation[]>>;
    public getNewControlInformationGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewControlInformation[]>>;
    public getNewControlInformationGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<NewControlInformation>(`${this.basePath}/getNewControlInformation`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set all information for a new quality control
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setNewControlInformationPost(body?: CreateControlInformation, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setNewControlInformationPost(body?: CreateControlInformation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setNewControlInformationPost(body?: CreateControlInformation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setNewControlInformationPost(body?: CreateControlInformation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        console.log(body)
        return this.httpClient.post<InlineResponse2002>(`${this.basePath}/setNewControlInformation`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * start a CPS control on an operation of a Manufacturing Order
     *
     * @param control
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startCpsControlControlPost(control: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;
    public startCpsControlControlPost(control: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;
    public startCpsControlControlPost(control: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;
    public startCpsControlControlPost(control: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (control === null || control === undefined) {
            throw new Error('Required parameter control was null or undefined when calling startCpsControlControlPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        console.log(control);
        return this.httpClient.post<InlineResponse2001>(`${this.basePath}/startCpsControl/${encodeURIComponent(String(control))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stop the control of aMO by the CPS
     *
     * @param control
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stopCpsControlControlPost(control: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2002>;
    public stopCpsControlControlPost(control: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2002>>;
    public stopCpsControlControlPost(control: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2002>>;
    public stopCpsControlControlPost(control: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (control === null || control === undefined) {
            throw new Error('Required parameter control was null or undefined when calling stopCpsControlControlPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse2002>(`${this.basePath}/stopCpsControl/${encodeURIComponent(String(control))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * get PDF File for recommendation
     *
     * @param action
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFileRecommendationGet(action: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getFileRecommendationGet(action: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getFileRecommendationGet(action: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getFileRecommendationGet(action: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling getFileRecommendationGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        console.log(headers)

        return this.httpClient.get<any>(`${this.basePath}/getFile/${encodeURIComponent(String(action))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
                responseType: 'text' 
            }
        );
    }

}
